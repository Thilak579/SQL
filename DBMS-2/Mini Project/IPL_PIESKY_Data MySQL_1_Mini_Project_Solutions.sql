USE mini_project_case_study_sql_1_ipl;

/*Questions â€“ Write SQL queries to get data for following requirements:*/

#1.	Show the percentage of wins of each bidder in the order of highest to lowest percentage.
SELECT BIDDER_ID, ROUND((WIN_BID_COUNT*100/(NO_OF_BIDS-BID_COUNT_UNACCOUNTABLE)),2) AS 'WIN_PERCENTAGE (%)' FROM
(
SELECT BD.BIDDER_ID,COUNT(BD.BID_STATUS) AS WIN_BID_COUNT,NO_OF_BIDS,
IFNULL((SELECT COUNT(BD1.BID_STATUS) FROM IPL_BIDDING_DETAILS AS BD1 WHERE BD1.BID_STATUS = 'BID' AND BD1.BIDDER_ID = BD.BIDDER_ID GROUP BY BD1.BIDDER_ID ),0) 
AS BID_COUNT_UNACCOUNTABLE
FROM IPL_BIDDING_DETAILS AS BD INNER JOIN IPL_BIDDER_POINTS AS BP 
ON BD.BIDDER_ID = BP.BIDDER_ID
WHERE BD.BID_STATUS = 'WON'GROUP BY BD.BIDDER_ID
) AS BID ORDER BY `WIN_PERCENTAGE (%)` DESC;

#2.	Display the number of matches conducted at each stadium with stadium name, city from the database.
SELECT S.STADIUM_ID,S.STADIUM_NAME,S.CITY,S.CAPACITY,S.ADDRESS,S.CONTACT_NO,COUNT(MATCH_ID) AS NO_OF_MATCHES
FROM IPL_STADIUM AS S INNER JOIN IPL_MATCH_SCHEDULE AS MS 
ON S.STADIUM_ID = MS.STADIUM_ID 
GROUP BY S.STADIUM_ID,S.STADIUM_NAME,S.CITY,S.CAPACITY,S.ADDRESS,S.CONTACT_NO ORDER BY STADIUM_ID ;
#OR
SELECT DISTINCT S.*,COUNT(MATCH_ID) OVER(PARTITION BY MS.STADIUM_ID) AS NO_OF_MATCHES FROM  IPL_STADIUM AS S INNER JOIN IPL_MATCH_SCHEDULE AS MS 
ON S.STADIUM_ID = MS.STADIUM_ID;


#3.	In a given stadium, what is the percentage of wins by a team which has won the toss?
CREATE VIEW MATCH_UPDATE AS 
(
SELECT DISTINCT *,COUNT(TEAM_ID) OVER(PARTITION BY STADIUM_ID,TEAM_ID) AS TOTAL_MATCH_COUNT FROM 
(
SELECT IMS.STADIUM_ID,IM.TEAM_ID1 AS TEAM_ID FROM IPL_MATCH_SCHEDULE AS IMS INNER JOIN IPL_MATCH AS IM ON IMS.MATCH_ID = IM.MATCH_ID
UNION ALL
SELECT IMS.STADIUM_ID,IM.TEAM_ID2 AS TEAM_ID FROM IPL_MATCH_SCHEDULE AS IMS INNER JOIN IPL_MATCH AS IM ON IMS.MATCH_ID = IM.MATCH_ID
) AS MAT );

CREATE VIEW WIN_MATCH AS
(
SELECT DISTINCT *,COUNT(TOSS_WINNER_UPDATE) OVER(PARTITION BY STADIUM_ID,TOSS_WINNER_UPDATE) AS WIN_COUNT FROM 
(
SELECT IMS.STADIUM_ID,
CASE WHEN TOSS_WINNER = 1 THEN TEAM_ID1 ELSE TEAM_ID2 END AS TOSS_WINNER_UPDATE, 
CASE WHEN MATCH_WINNER = 1 THEN TEAM_ID1 ELSE TEAM_ID2 END AS MATCH_WINNER_UPDATE 
FROM IPL_MATCH_SCHEDULE AS IMS INNER JOIN IPL_MATCH AS IM 
ON IMS.MATCH_ID = IM.MATCH_ID 
) AS MAT WHERE TOSS_WINNER_UPDATE = MATCH_WINNER_UPDATE 
);
SELECT MU.*,WM.WIN_COUNT,ROUND((WIN_COUNT*100/TOTAL_MATCH_COUNT),2) AS `WIN_PERCENTAGE (%)` FROM MATCH_UPDATE AS MU INNER JOIN WIN_MATCH AS WM ON WM.STADIUM_ID = MU.STADIUM_ID AND WM.TOSS_WINNER_UPDATE = MU.TEAM_ID;


#4.	Show the total bids along with bid team and team name.
SELECT IBD.*,IT.TEAM_NAME,IT.REMARKS,IBP.NO_OF_BIDS FROM IPL_BIDDING_DETAILS AS IBD INNER JOIN IPL_TEAM AS IT ON IBD.BID_TEAM = IT.TEAM_ID 
INNER JOIN IPL_BIDDER_POINTS AS IBP ON IBP.BIDDER_ID = IBD.BIDDER_ID;


#5.	Show the team id who won the match as per the win details.
SELECT IM.MATCH_ID,IM.WIN_DETAILS,IT.TEAM_ID,IT.REMARKS FROM 
(SELECT *,CASE WHEN MATCH_WINNER = 1 THEN TEAM_ID1 ELSE TEAM_ID2 END AS MATCH_WINNER_UPDATE 
FROM IPL_MATCH) AS IM INNER JOIN IPL_TEAM AS IT ON IM.MATCH_WINNER_UPDATE = IT.TEAM_ID;


#6.	Display total matches played, total matches won and total matches lost by team along with its team name

CREATE VIEW TOTAL_MATCH AS
(
SELECT TEAM_ID1 AS TEAM_ID FROM IPL_MATCH
UNION ALL
SELECT TEAM_ID2 AS TEAM_ID FROM IPL_MATCH 
);


CREATE VIEW WIN_LOOSE AS
(
SELECT *,
CASE WHEN MATCH_WINNER = 1 THEN TEAM_ID1 ELSE TEAM_ID2 END AS MATCH_WINNER_TEAM,
CASE WHEN MATCH_WINNER = 1 THEN TEAM_ID2 ELSE TEAM_ID1 END AS MATCH_LOOSER_TEAM
FROM IPL_MATCH
);

WITH WIN_LOOSE_COUNT AS
(
SELECT MATCH_WINNER_TEAM AS TEAM_ID,WIN_COUNT,LOOSE_COUNT FROM 
(SELECT DISTINCT MATCH_WINNER_TEAM,COUNT(MATCH_WINNER_TEAM) OVER(PARTITION BY MATCH_WINNER_TEAM)  AS WIN_COUNT
FROM WIN_LOOSE) AS WL1 INNER JOIN
(SELECT DISTINCT MATCH_LOOSER_TEAM,COUNT(MATCH_LOOSER_TEAM) OVER(PARTITION BY MATCH_LOOSER_TEAM)  AS LOOSE_COUNT
FROM WIN_LOOSE) AS WL2 ON WL1.MATCH_WINNER_TEAM = WL2.MATCH_LOOSER_TEAM
)
SELECT TM.TEAM_ID,TEAM_NAME,TOTAL_MATCH_COUNT,WIN_COUNT,LOOSE_COUNT FROM 
(SELECT DISTINCT *,COUNT(TEAM_ID) OVER(PARTITION BY TEAM_ID) AS TOTAL_MATCH_COUNT FROM TOTAL_MATCH) AS TM INNER JOIN 
WIN_LOOSE_COUNT AS WLC ON TM.TEAM_ID = WLC.TEAM_ID INNER JOIN IPL_TEAM AS IT ON TM.TEAM_ID = IT.TEAM_ID;




#7.	Display the bowlers for Mumbai Indians team

SELECT * FROM IPL_TEAM_PLAYERS WHERE REMARKS LIKE '%MI%' AND PLAYER_ROLE = 'BOWLER';

#8.	How many all-rounders are there in each team, Display the teams with more than 4 
#all-rounder in descending order.

SELECT DISTINCT ITP1.TEAM_ID,TEAM_NAME,ALL_ROUNDER_COUNT FROM
(
SELECT *,COUNT(PLAYER_ID) OVER(PARTITION BY ITP.TEAM_ID) AS ALL_ROUNDER_COUNT FROM IPL_TEAM_PLAYERS AS ITP 
WHERE PLAYER_ROLE = 'All-Rounder'
) AS ITP1 INNER JOIN IPL_TEAM AS IT ON ITP1.TEAM_ID = IT.TEAM_ID 
WHERE ALL_ROUNDER_COUNT > 4 ORDER BY ALL_ROUNDER_COUNT DESC;

